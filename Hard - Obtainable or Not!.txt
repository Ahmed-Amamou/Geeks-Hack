In this challenge, we'll be dealing with binary strings, exclusively comprised of 0s and 1s. Each character within the string is either a 0 or a 1, 
and our operations will focus on substrings noted as s[l…r], where l and r signify the start and end positions of the substring.

We're allowed to manipulate these strings by selecting a substring and replacing it with another string. 
The operations include two types: transforming 011 to 110 or changing 110 to 011. 
For instance, applying one operation to the string 110011110 might get us 011011110, 110110110, or 110011011.

A binary string 'a' is considered obtainable from binary string 'b' if there exists a sequence s1, s2, ..., sk, where s1 equals 'a', s_k equals 'b', 
and for each i in the range [1, k−1], si can be transformed into s_i+1 using exactly one operation. 
It's important to note that 'k' can be 1, implying that every string is obtainable from itself.

You're given a string 't' and 'q' queries. Each query consists of three integers: l1, l2, and len. Your task is to determine whether t[l1…l1+len−1] is obtainable from t[l2…l2+len−1].

Input:

The first line contains an integer 'n' (1≤n≤2⋅10^5), denoting the length of string 't'.
The second line contains the string 't' (|t|=n). Each character in 't' is either 0 or 1.
The third line holds an integer 'f' (1≤q≤2⋅10^5), representing the number of queries.
Subsequent 'f' lines denote the queries, each line containing three integers l1, l2, and len (1≤l1,l2≤n, 1≤len≤|t|−max(l1,l2)+1) for the i-th query.
Output:

For each query f, print either YES if t[l1…l1+len−1] is obtainable from t[l2…l2+len−1], or NO otherwise.

Input:
3
010
3
1 3 1
1 3 1
3 2 1
Output:
Yes
Yes
No